import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import psycopg2

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token="####")
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    dbname="cherdak",
    user="postgres",
    password="####",
    host="localhost"
)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ —Ç–∞–±–∞–∫–∞, —á–∞—è, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
button_tobacco = KeyboardButton("üçÇ –¢–∞–±–∞–∫")
button_tea = KeyboardButton("üçµ –ß–∞–π")
button_location = KeyboardButton("üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏?")
button_admin = KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(button_tobacco, button_tea, button_location, button_admin)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await bot.send_message(chat_id=message.chat.id,
                           text="–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–ª—å—è–Ω–Ω—ã–π –±–æ—Ç '–ß–µ—Ä–¥–∞–∫'",
                           reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ üçÇ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–∞–±–∞–∫–∞
@dp.message_handler(lambda message: message.text == "üçÇ –¢–∞–±–∞–∫")
async def send_tobacco_list(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–∞–±–∞–∫–∞"""
    cursor.execute("SELECT name, flavor, available FROM tobacco")
    tobaccos = cursor.fetchall()

    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–∞–∫–∞"""
    if tobaccos:
        tobacco_list = "üçÇ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ä—Ç–∞ —Ç–∞–±–∞–∫–∞:*\n\n"
        for tobacco in tobaccos:
            name, flavor, available = tobacco
            available_text = "‚úÖ *–í –Ω–∞–ª–∏—á–∏–∏*" if available else "‚ùå *–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏*"
            tobacco_list += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n**–í–∫—É—Å:** {flavor}\n{available_text}\n\n"
            tobacco_list += "----------------------\n"
    else:
        tobacco_list = "üòî _–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ —Ç–∞–±–∞–∫–∞._"

    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await bot.send_message(message.chat.id, tobacco_list, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ üçµ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —á–∞—è
@dp.message_handler(lambda message: message.text == "üçµ –ß–∞–π")
async def send_tea_list(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —á–∞—è"""
    cursor.execute("SELECT name, description, available FROM tea")
    teas = cursor.fetchall()

    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—è"""
    if teas:
        tea_list = "üçµ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ä—Ç–∞ —á–∞—è:*\n\n"
        for tea in teas:
            name, description, available = tea
            available_text = "‚úÖ *–í –Ω–∞–ª–∏—á–∏–∏*" if available else "‚ùå *–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏*"
            tea_list += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n{available_text}\n\n"
            tea_list += "----------------------\n"
    else:
        tea_list = "üòî _–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–µ—Å—å —á–∞–π –≤—ã–ø–∏—Ç, –Ω–æ –º—ã —Å–∫–æ—Ä–æ –∑–∞–≤–µ–∑–µ–º –µ—â–µ!_ üòâ"

    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await bot.send_message(message.chat.id, tea_list, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏?
@dp.message_handler(lambda message: message.text == "üìç –ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏?")
async def send_location(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã"""
    location_link = "https://yandex.ru/maps/org/cherdak/134444637764/?ll=39.964232%2C53.244942&z=16.59"
    await bot.send_message(
        message.chat.id,
        f"–ù–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: [–ö–∞–ª—å—è–Ω–Ω–∞—è '–ß–µ—Ä–¥–∞–∫']({location_link})",
        parse_mode="Markdown"
    )

# –ö–ª–∞—Å—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AddItemStates(StatesGroup):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–ª–∏—á–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    waiting_for_category = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_availability = State()
    waiting_for_edit_action = State()
    waiting_for_selection = State()
    waiting_for_edit_detail = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    waiting_for_new_name = State()
    waiting_for_new_description = State()
    waiting_for_new_availability = State()

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    cursor.execute("SELECT * FROM admins WHERE telegram_id = %s", (user_id,))
    return cursor.fetchone() is not None

def get_admin_menu_keyboard():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–∞–∫", "–î–æ–±–∞–≤–∏—Ç—å —á–∞–π", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏", "–í—ã–π—Ç–∏"]
    keyboard.add(*buttons)
    return keyboard

def get_availability_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–í –Ω–∞–ª–∏—á–∏–∏", "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", "–û—Ç–º–µ–Ω–∞"]
    keyboard.add(*buttons)
    return keyboard

def get_items_keyboard(items):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for item in items:
        name = item[2]
        button = KeyboardButton(name)
        keyboard.add(button)
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'"""
    cancel_button = KeyboardButton("–û—Ç–º–µ–Ω–∞")
    keyboard.add(cancel_button)
    return keyboard

def get_edit_delete_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –û—Ç–º–µ–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]
    keyboard.add(*buttons)
    return keyboard

def get_edit_detail_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è", "–û—Ç–º–µ–Ω–∞"]
    keyboard.add(*buttons)
    return keyboard

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞'"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_button = KeyboardButton("–û—Ç–º–µ–Ω–∞")
    keyboard.add(cancel_button)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message_handler(lambda message: message.text == "–í—ã–π—Ç–∏", state="*")
async def admin_exit(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await state.finish()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", state="*")
async def admin_panel(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if is_admin(message.from_user.id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu_keyboard())
        await AddItemStates.waiting_for_category.set()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=AddItemStates.waiting_for_category)
async def choose_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–∞–∫":
        await state.update_data(category="—Ç–∞–±–∞–∫")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–∞–∫–∞:", reply_markup=get_cancel_keyboard())
        await AddItemStates.waiting_for_name.set()
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å —á–∞–π":
        await state.update_data(category="—á–∞–π")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—è:", reply_markup=get_cancel_keyboard())
        await AddItemStates.waiting_for_name.set()
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏":
        await select_item_for_edit_or_delete(message, state)
    elif message.text == "–í—ã–π—Ç–∏":
        await admin_exit(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=AddItemStates.waiting_for_name)
async def add_name(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_cancel_keyboard())
    await AddItemStates.waiting_for_description.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=AddItemStates.waiting_for_description)
async def add_description(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(description=message.text)
    await message.answer("–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏?", reply_markup=get_availability_keyboard())
    await AddItemStates.waiting_for_availability.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=AddItemStates.waiting_for_availability)
async def add_availability(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    availability = message.text == "–í –Ω–∞–ª–∏—á–∏–∏"
    data = await state.get_data()

    """–í—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    if data["category"] == '—Ç–∞–±–∞–∫':
        cursor.execute(
            "INSERT INTO tobacco (name, flavor, available) VALUES (%s, %s, %s)",
            (data['name'], data['description'], availability)
        )
    elif data["category"] == '—á–∞–π':
        cursor.execute(
            "INSERT INTO tea (name, description, available) VALUES (%s, %s, %s)",
            (data['name'], data['description'], availability)
        )

    conn.commit()
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu_keyboard())
    await AddItemStates.waiting_for_category.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏" or message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏", state="*")
async def select_item_for_edit_or_delete(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è"""
    action = message.text
    await state.update_data(action=action)

    """–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü —Ç–∞–±–∞–∫–∞ –∏ —á–∞—è"""
    cursor.execute(
        "SELECT 'tobacco' AS category, id, name FROM tobacco UNION SELECT 'tea' AS category, id, name FROM tea"
    )
    items = cursor.fetchall()

    if items:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        keyboard = get_items_keyboard(items)
        await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        await AddItemStates.waiting_for_selection.set()
    else:
        await message.answer("üòî _–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π._")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(state=AddItemStates.waiting_for_selection)
async def handle_item_selection(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    cursor.execute(
        "SELECT 'tobacco' AS category, id, name FROM tobacco UNION SELECT 'tea' AS category, id, name FROM tea"
    )
    items = cursor.fetchall()

    """–ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∏"""
    selected_item = next((item for item in items if item[2] == message.text), None)

    if selected_item:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        await state.update_data(item_id=selected_item[1], category=selected_item[0])
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_item[2]}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=get_edit_delete_keyboard()
        )
        await AddItemStates.waiting_for_edit_action.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(state=AddItemStates.waiting_for_edit_action)
async def handle_edit_or_delete_action(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    action = message.text.lower()

    if action == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è"""
        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=get_edit_detail_keyboard()
        )
        await AddItemStates.waiting_for_edit_detail.set()
    elif action == "—É–¥–∞–ª–∏—Ç—å":
        data = await state.get_data()
        item_id, category = data['item_id'], data['category']

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if category == 'tobacco':
            cursor.execute("DELETE FROM tobacco WHERE id = %s", (item_id,))
        else:
            cursor.execute("DELETE FROM tea WHERE id = %s", (item_id,))

        conn.commit()
        await message.answer("–ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_menu_keyboard()
        )
        await AddItemStates.waiting_for_category.set()
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å* –∏–ª–∏ *–£–¥–∞–ª–∏—Ç—å*.",
            reply_markup=get_edit_delete_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(state=AddItemStates.waiting_for_edit_detail)
async def handle_edit_detail(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    detail = message.text.lower()

    if detail == "–Ω–∞–∑–≤–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=get_cancel_keyboard())
        await AddItemStates.waiting_for_new_name.set()
    elif detail == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=get_cancel_keyboard())
        await AddItemStates.waiting_for_new_description.set()
    elif detail == "—Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è:", reply_markup=get_availability_keyboard())
        await AddItemStates.waiting_for_new_availability.set()
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–ù–∞–∑–≤–∞–Ω–∏–µ*, *–û–ø–∏—Å–∞–Ω–∏–µ* –∏–ª–∏ *–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è*.",
            reply_markup=get_edit_detail_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.message_handler(state=AddItemStates.waiting_for_new_name)
async def update_item_name(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    new_name = message.text
    data = await state.get_data()
    item_id, category = data['item_id'], data['category']

    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if category == 'tobacco':
        cursor.execute("UPDATE tobacco SET name = %s WHERE id = %s", (new_name, item_id))
    else:
        cursor.execute("UPDATE tea SET name = %s WHERE id = %s", (new_name, item_id))

    conn.commit()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_keyboard()
    )
    await AddItemStates.waiting_for_category.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=AddItemStates.waiting_for_new_description)
async def update_item_description(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    new_description = message.text
    data = await state.get_data()
    item_id, category = data['item_id'], data['category']

    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if category == 'tobacco':
        cursor.execute("UPDATE tobacco SET flavor = %s WHERE id = %s", (new_description, item_id))
    else:
        cursor.execute("UPDATE tea SET description = %s WHERE id = %s", (new_description, item_id))

    conn.commit()
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_keyboard()
    )
    await AddItemStates.waiting_for_category.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ª–∏—á–∏—è
@dp.message_handler(state=AddItemStates.waiting_for_new_availability)
async def update_item_availability(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    availability = message.text == "–í –Ω–∞–ª–∏—á–∏–∏"
    data = await state.get_data()
    item_id, category = data['item_id'], data['category']

    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if category == 'tobacco':
        cursor.execute("UPDATE tobacco SET available = %s WHERE id = %s", (availability, item_id))
    else:
        cursor.execute("UPDATE tea SET available = %s WHERE id = %s", (availability, item_id))

    conn.commit()
    await message.answer("–°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_menu_keyboard())
    await AddItemStates.waiting_for_category.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–û—Ç–º–µ–Ω–∞' –≤–æ –≤—Ä–µ–º—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞", state="*")
async def cancel_action(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–û—Ç–º–µ–Ω–∞' –≤–æ –≤—Ä–µ–º—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu_keyboard())
    await AddItemStates.waiting_for_category.set()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
